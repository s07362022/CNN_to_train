# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'final.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
#import imutils
from tensorflow import keras
#from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model
import os 
#from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
#from sklearn.model_selection import train_test_split
#from keras.utils import np_utils
#from sklearn.model_selection import train_test_split
from tensorflow.keras.models import load_model
import numpy as np
import matplotlib.pyplot as plt
import cv2
from keras.utils import np_utils

# Data load
E="D:\\code\\PetImages\\Dog"
F="D:\\code\\PetImages\\Cat"
IMAGE_SIZE=200
images=[]
labels=[]
BC = 0
BCW = 0
for i in os.listdir(E):
    try:
        img1 = cv2.imread(E+"/"+i)
        #print("S1")
        img1 = cv2.resize(img1, (200, 200))
        #print("S2")
        images.append(img1)
        labels.append(0)
        
        BC+=1
        if BC ==20:
            break
    except:
        print("data load error")
for i in os.listdir(F):
    try:
        img2 = cv2.imread(F+"/"+i)
        img2 = cv2.resize(img2, (200, 200))
        images.append(img2)
        labels.append(1)
        BCW+=1
        if BCW ==20:
            break
    except:
        print("data load error")
test_final1=np.array(images, dtype=np.float32)
test_final1=test_final1/255.0
# load model
model1 = load_model("D:\\code\\CNN_weight\\dog_cat_havemask.h5")
model2 = load_model("D:\\code\\CNN_weight\\dog_cat_notmask.h5")
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(606, 501)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.verticalLayout_2.addWidget(self.groupBox)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.groupBox.setTitle(_translate("Dialog", "GroupBox"))
        self.pushButton.setText(_translate("Dialog", "1. Show Model Structure"))
        self.pushButton_2.setText(_translate("Dialog", "2. Show TensorBoard"))
        self.pushButton_3.setText(_translate("Dialog", "3. Test"))
        self.pushButton_4.setText(_translate("Dialog", "4. Data Augmantatiom"))

def a(model1):
    print(model1.summary(),"Resnet50")

def b():
    tmp = os.popen('com.sh').readlines()
    tmp

def plot_image(image,labels,prediction,idx,num=10):  
    fig = plt.gcf() 
    fig.set_size_inches(12, 14) 
    if num>10: 
        num=10 
    for i in range(0, num): 
        ax = plt.subplot(2,5, 1+i) 
        ax.imshow(image[idx], cmap='binary') 
        title = "label=" +str(labels[idx]) 
        if len(prediction)>0: 
            title+=",perdict="+str(prediction[idx]) 
        ax.set_title(title,fontsize=10) 
        ax.set_xticks([]);ax.set_yticks([]) 
        idx+=1 
    plt.show() 


def c(model1,model2,test_final1,labels):
    predict_y = model2.predict(test_final1)
    p_y=predict_y.argmax(axis=1)
    plot_image(test_final1,labels,p_y,idx=15)
    

def d (model1,model2,test_final1,labels):
    labels_OneHot = np_utils.to_categorical(labels)
    scores1 = model1.evaluate(test_final1,labels_OneHot)
    print(scores1)
    scores2 = model2.evaluate(test_final1,labels_OneHot)
    print(scores2)
    y = [scores1[1],scores2[1]]
    x = ["before Random-Erasing","after Random-Erasing "]
    plt.bar(np.arange(len(x)),y)
    plt.ylabel('Accuracy')
    plt.xticks(np.arange(len(x)), x)
    plt.show()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    # 1.mode : model.summary
    ui.pushButton.clicked.connect(lambda:a(model1))
    # 2.mode : show tensorboard
    ui.pushButton_2.clicked.connect(lambda:b())
    # 3.mode : test
    import cv2
    img1=cv2.imread("D:\\code\\PetImages\\Dog\\0.jpg")
    img1 = cv2.resize(img1,(200,200))
    img1.reshape
    np.array(img1, dtype=np.float32)
    ui.pushButton_3.clicked.connect(lambda:c(model1,model2,test_final1,labels))
    # 4. mode : plot prediction
    ui.pushButton_4.clicked.connect(lambda:d(model1,model2,test_final1,labels))
    Dialog.show()
    sys.exit(app.exec_())
